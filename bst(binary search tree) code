/*
@uthor: Subhadip Saha, 2147233, 3MCA B
DATA STRUCTURES LAB-10 BST(Binary search tree)
*/
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *left, *right;
};

// creating the node
struct node *newnode(int d)
{
    struct node *ptr;
    ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = d;
    ptr->left = ptr->right = NULL;
    return ptr;
}

// inorder traversal
void inorder(struct node *root)
{
    if (root != NULL)
    {

        // traverse left
        inorder(root->left);

        // traverse root
        printf("%d -> ", root->data);

        // traverse right
        inorder(root->right);
    }
}
// preorder traversal
void preorder(struct node *root)
{
    if (root != NULL)
    {

        // traverse root
        printf("%d -> ", root->data);

        // traverse left
        preorder(root->left);

        // traverse right
        preorder(root->right);
    }
}
// postorder traversal
void postorder(struct node *root)
{
    if (root != NULL)
    {

        // traverse left
        postorder(root->left);

        // traverse right
        postorder(root->right);

        // traverse root
        printf("%d -> ", root->data);
    }
}
// inserting a node
struct node *insert(struct node *node, int x)
{

    // return newnode if the tree is empty
    if (node == NULL)
        return newnode(x);
    if (x < node->data)
        node->left = insert(node->left, x);
    else
        node->right = insert(node->right, x);

    return node;
}

// find the inorder successor
struct node *minvalnode(struct node *node)
{
    struct node *current = node;
    while (current && current->left != NULL)
    {
        current = current->left;
    }
    return current;
}

// Deleting a node
struct node *deleteNode(struct node *root, int x)
{
    // Return if the tree is empty
    if (root == NULL)
        return root;

    // Find the node to be deleted
    if (x < root->data)
        root->left = deleteNode(root->left, x);
    else if (x > root->data)
        root->right = deleteNode(root->right, x);

    else
    {
        // If the node is with only one child or no child
        if (root->left == NULL)
        {
            struct node *temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL)
        {
            struct node *temp = root->left;
            free(root);
            return temp;
        }

        // If the node has two children
        struct node *temp = minvalnode(root->right);

        // Place the inorder successor in position of the node to be deleted
        root->data = temp->data;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// main function
int main()
{
    struct node *root = NULL;
    int n1 = 0, n2 = 0, n3 = 0, i, j, x, del, ch = 0;
    printf("\nEnter the no of elements you want to enter: ");
    scanf("%d", &n1);
    for (i = 1; i <= n1; i++)
    {
        printf("\nEnter the %d element: ", i);
        scanf("%d", &x);
        root = insert(root, x);
    }
    printf("\nPreOrder traversal: ");
    preorder(root);
    printf("\nPostOrder traversal: ");
    postorder(root);
    printf("\nInorder traversal: ");
    inorder(root);
    while (ch != 3)
    {
        printf("\nBST Operations\n1.Insert New Node\n2.Delete Node\n3.Exit Choose: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("\nEnter the no nodes you want to insert: ");
            scanf("%d", &n3);
            for (i = 1; i <= n3; i++)
            {
                printf("\nEnter the %d element: ", i);
                scanf("%d", &x);
                root = insert(root, x);
            }
            printf("\nPreOrder traversal: ");
            preorder(root);
            printf("\nPostOrder traversal: ");
            postorder(root);
            printf("\nInorder traversal: ");
            inorder(root);

            break;
        case 2:
            printf("\nEnter the no nodes you want to delete: ");
            scanf("%d", &n2);
            for (j = 1; j <= n2; j++)
            {
                printf("\nEnter the %d element to be deleted: ", j);
                scanf("%d", &del);
                root = deleteNode(root, del);
            }
            printf("\norder after deleting the node: ");
            printf("\nPreOrder traversal: ");
            preorder(root);
            printf("\nPostOrder traversal: ");
            postorder(root);
            printf("\nInorder traversal: ");
            inorder(root);
            break;
        case 3:
            printf("\nStopping...");
            exit(100);
            break;
        default:
            printf("\nEnter Appropriate Choice: ");
            break;
        }
    }
}
